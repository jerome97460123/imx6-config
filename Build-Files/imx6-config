#!/bin/bash
# Part of imx6-config http://github.com/kicker22004/imx6-config
#
# See LICENSE file for copyright and license details

INTERACTIVE=True
ASK_TO_REBOOT=0
DRIVE=/tmp/drivelist
VERSION=`lsb_release -a`
CODENAME=`lsb_release -c -s`
FILE=/usr/share/fancron
CRON='*  *    * * *   root    /usr/share/imx6-config/Fan_Control'
rsynclog=/tmp/rsync.log
clear

# Make sure we run with root privileges
if [ $UID != 0 ]; then
	# not root, use sudo
	echo "This script needs root privileges, rerunning it now using sudo!"
	sudo "${SHELL}" "$0" $*
	exit $?
fi

# get real username
if [ $UID = 0 ] && [ ! -z "$SUDO_USER" ]; then
	USER="$SUDO_USER"
else
	USER="$(whoami)"
fi
# Note that USER may still end up as root, if people run it as root instead of using sudo!

whiptail --fb --msgbox "$VERSION" --title "This is your system information." 20 60 1


calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-8))
}

do_about() {
  whiptail --fb --msgbox "\
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
II                                                              II
II                 Information about imx6-config                II
II                  Version 0.10 from 09-17-2015                II
II                  Supported devices: SolidRuns                II
II                                                              II
II                        * Hummingboard                        II
II                        * Cuboxi                              II
II                                                              II
II                 More info at WWW.SOLID-RUN.COM               II
II              Built and Maintained by: Kicker22004            II
IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII \
" 20 70 1
}

do_change_pass() {
  whiptail --fb --msgbox "You will now be asked to enter a new password for the $USER user" 20 60 1
  passwd $USER &&
  whiptail --fb --msgbox "Password changed successfully" 20 60 1
}

do_change_Root() {
   whiptail --fb --msgbox "You will now be asked to enter a new password for the root user" 20 60 1
  passwd root &&
  whiptail --fb --msgbox "Password changed successfully" 20 60 1
}

do_configure_keyboard() {
  apt-get install keyboard-configuration
  dpkg-reconfigure keyboard-configuration &&
  printf "Reloading keymap. This may take a short while\n" &&
  invoke-rc.d keyboard-setup start
}

do_change_locale() {
  dpkg-reconfigure locales
}

do_change_timezone() {
  dpkg-reconfigure tzdata
}

do_change_hostname() {
  whiptail --fb --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen. 
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1

  CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
  NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    echo $NEW_HOSTNAME > /etc/hostname
    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    ASK_TO_REBOOT=1
  fi
}

do_ssh() {
  if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
    whiptail --fb --msgbox "Initial ssh key generation still running. Please wait and try again." 20 60 2
    return 1
  fi
  whiptail --fb --yesno "Would you like the SSH server enabled or disabled?" 20 60 2 \
    --yes-button Enable --no-button Disable
  RET=$?
  if [ $RET -eq 0 ]; then
    update-rc.d ssh enable &&
    invoke-rc.d ssh start &&
    whiptail --fb --msgbox "SSH server enabled" 20 60 1
  elif [ $RET -eq 1 ]; then
    update-rc.d ssh disable &&
    whiptail --fb --msgbox "SSH server disabled" 20 60 1
  else
    return $RET
  fi
}

do_uboot() {
  if [ ! -f /boot/uEnv.txt ]; then
    whiptail --fb --msgbox  "No Boot File, Your probably running on an external device, Mounting..." 20 60 1
    whiptail --fb --msgbox "Warning!! If you don't know what your doing then leave the next menu by pressing CTRL+X" 20 60 1
    mount /dev/mmcblk0p1 /mnt
    nano /mnt/boot/uEnv.txt 
else
    whiptail --fb --msgbox "Warning!! If you don't know what your doing then leave the next menu by pressing CTRL+X" 20 60 1
    nano /boot/uEnv.txt
fi 
}

do_fanon() {
    echo 1 > /sys/class/gpio/gpio1/value
    whiptail --fb --msgbox " Your Fan should be on now!, It will shut off within 60 seconds" 10 60 1
  do_fan_menu
}

do_fan_options() {
FAN=$(whiptail --title "Fan Settings" --radiolist \
"What Temp Should the fan turn on? (Default 55C)" 15 60 4 \
"35" "Set To 35C" OFF \
"45" "Set To 45C" OFF \
"55" "Set To 55C" ON \
"65" "Set To 65C" OFF 3>&1 1>&2 2>&3)

exitstatus=$?
if [ $exitstatus = 0 ]; then
 whiptail --fb --msgbox  "You set the fan to turn on at: $FAN C" 20 60 0
    service cron stop
    sed -i 's/MAX_TEMP=.*/MAX_TEMP="'$FAN'000"/' /usr/share/imx6-config/Fan_Control
    service cron start
    do_fan_menu
fi
}

do_swap_install() {
whiptail --fb --yesno "Swap Installer?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    do_swap_install_check
  elif [ $RET -eq 1 ]; then
    whiptail --fb --msgbox "Leaving" 20 60 1
    do_swap_menu
  else
    return $RET
  fi
}

do_swap_install_check() {
     whiptail --fb --msgbox "On the first run it will take some time, It's creating a default 2GB swap." 20 60 1
   if type dphys-swapfile >/dev/null 2>&1 ; then
     whiptail --fb --msgbox " You already have Swap installed, Use other options for size changes." 20 60 1
     do_swap_menu
   else
     clear
     if [ ! -f /etc/dphys-swapfile ]; then
    echo CONF_SWAPSIZE= > /etc/dphys-swapfile
   else
        apt-get install -y dphys-swapfile
	sed -i 's/#CONF_SWAPSIZE/CONF_SWAPSIZE/' /etc/dphys-swapfile
     fi  
     whiptail --fb --msgbox " All done, Check swap size option to adjust it." 20 60 1
     do_swap_menu
   fi
}

do_swap_limit_custom() {
  sed -n -e '/CONF_SWAPSIZE/ s/.*\= *//p' /etc/dphys-swapfile > /tmp/swap_size
  CURRENT_LIMIT=`cat /tmp/swap_size | tr -d " \t\n\r"`
  NEW_LIMIT=$(whiptail --inputbox "Please enter a Swap limit.(example 512)" 20 60 "$CURRENT_LIMIT" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    echo $NEW_LIMIT > /tmp/swap_size
    sed -i "s/CONF_SWAPSIZE=$CURRENT_LIMIT/CONF_SWAPSIZE=$NEW_LIMIT/g" /etc/dphys-swapfile 
    clear
    dphys-swapfile setup
    whiptail --msgbox "Upload Limit Set to $NEW_LIMIT" 20 60 1
    rm /tmp/swap_size
    do_swap_menu
  fi
}

do_swap_limit_preset() {
    sed -n -e '/CONF_SWAPSIZE/ s/.*\= *//p' /etc/dphys-swapfile > /tmp/swap_size
    CURRENT_LIMIT=`cat /tmp/swap_size | tr -d " \t\n\r"`
    whiptail --msgbox "Make sure to select with the spacebar!" 20 60 1
    PRESET=$(whiptail --title "Swap Presets" --radiolist \
    "Select Swap Preset" 15 60 4 \
    "512" "Set Swap to 512m" OFF \
    "1024" "Set Swap to 1024M" ON \
    "1536" "Set swap to 1536M" OFF \
    "2048" "Set swap to 2048M" OFF 3>&1 1>&2 2>&3)

exitstatus=$?
if [ $exitstatus = 0 ]; then
    clear
    dphys-swapfile setup
    echo $PRESET > /tmp/swap_size
    sed -i "s/CONF_SWAPSIZE=$CURRENT_LIMIT/CONF_SWAPSIZE=$PRESET/g" /etc/dphys-swapfile
    whiptail --msgbox "Swap has been changed to $PRESET" 20 60 1
    do_swap_menu
else
    whiptail --msgbox  "Leaving." 20 60 1
    do_swap_menu
  fi
}

do_desktops() {
whiptail --fb --msgbox "Installing a GUI can take some time... Please be patient" 20 60 1
chmod +x /usr/share/imx6-config/desktops
/usr/share/imx6-config/desktops
}

do_SD2X() {
   # collect list of drives 
drives= 
i=0 
for file in /dev/disk/by-id/*; do 
        # extract canonical disk name 
        disk=`readlink -f $file` 

        # extract disk id 
        id=`basename $file` 

        # filter out any partitions 
        # Logic is: remove the numeric end (if any) and check if a disk with that name exists 
        basedisk=`echo $disk | sed -e "s;[0-9]\+$;;g"` 
        if [ $disk != $basedisk ] && [ -e $basedisk ]; then 
                # so the current disk is a partition of this 
                continue 
        fi 
        # for MMC parts additional magic is required, since a p is added in between 
        basedisk=`echo $disk | sed -e "s;p[0-9]\+$;;g"` 
        if [ $disk != $basedisk ] && [ -e $basedisk ]; then 
                # so the current disk is a partition of this 
                continue 
        fi 

        # I still want to know the disk size 
        # luckily, its available under /sys/class/block/DEV/size 
        name=`basename $disk` 
        size=`cat /sys/class/block/$name/size` 
        if [ $? != 0 ]; then 
                size="??" 
        fi 
        # convert to GB 
        ((size=size/2/1024/1024)) 

        # save in array as pair 
        drives[$i]="${disk} ${id}--${size}GB(+/-5%)" 
        ((i=i+1)) 
done 
# present list to user 
selected_drive=$(whiptail --menu "Select target disk, Or Cancel to Leave" 20 80 ${#drives[@]} ${drives[@]} 3>&1 1>&2 2>&3) 
  if [ $? -eq 0 ]; then
  if [[ $selected_drive = "/dev/mmcblk0" ]]
  then
  whiptail --msgbox --fb " YOUR A MAD MAN!, THIS IS YOUR SDCARD YOUR TRING TO ERASE!....EXITING" 20 60 1
     return $RET
fi
   RET=$?
   if [ $RET -eq 0 ]; then
     do_last_chance
   elif [ $RET -eq 1 ]; then
     whiptail --fb --msgbox "Leaving" 20 60 1
   else
    calc_wt_size
  fi
else
  if [ $? -eq 1 ]; then
  return $?
fi
fi
}

do_last_chance() {
whiptail --fb --yesno "THIS IS YOUR LAST CHANCE TO SAVE YOUR DATA! AFTER THIS IT IS TOO LATE TO STOP THE PROCESS. YOU HAVE BEEN WARNED! ONCE AGAIN YOU SELECTED $selected_drive" 20 60 1 \
    --yes-button WIPE --no-button NO
  RET=$?
  if [ $RET -eq 0 ]; then
    for v_partition in $(parted -s $selected_drive print|awk '/^ / {print $1}')
do
    parted -s $selected_drive rm ${v_partition}
done

# Find size of disk
    umount $selected_drive* >> /dev/null 2>&1
    v_disk=$(parted -s $selected_drive print|awk '/^Disk/ {print $3}'|sed 's/[Mm][Bb]//')
# Create single partition
    echo -e "o\nn\np\n1\n\n\nw" | fdisk $selected_drive

# Format the partition
    mke2fs -T ext4 "${selected_drive}1"
    sync
    clear
  elif [ $RET -eq 1 ]; then
    whiptail --fb --msgbox "Leaving" 20 60 1
    return $RET
  else
    return $RET
  fi
   
   whiptail --fb --yesno "About to start coping files, Please be patiant." 15 78 \
     --yes-button Continue --no-button No 
   RET=$? 
   if [ $RET -eq 0 ]; then 
    # mount target filesystem 
     mount "${selected_drive}1" /mnt 
    # build exclude list 
    EXCL_ARGS= 
    i=0 
    for pattern in `mount | cut -d' ' -f3 | grep -v "^/$"`; do 
        EXCL_ARGS[$i]="--exclude=$pattern/*" 
        ((i=i+1)) 
    done 
    
    EXCL_ARGS[$i]="--exclude=/boot/*"
  echo " Please be very patient, Depending on how large your system is this could take a while." 
  echo " Trust me, We all hate waiting on this.....Probably me more than most...only had to run it countless times so that it goes smooth for you. :P "
  rsync -aH -p -P ${EXCL_ARGS[@]} / /mnt > $rsynclog 2>&1
  if [[ $? -ne 0 ]]; then
      whiptail --fb --msgbox "Looks like something went wrong, Please check the log at $rsynclog for clues." 20 60 1
  clear
  echo "You had a failure while attempting to copy your system to ${selected_drive}1."
  echo " Please check $rsynclog for the failure."
  exit 
  fi
  sync
  umount /mnt
  whiptail --fb --msgbox "Transfer Complete! Please use the Boot Select option to select the drive you want to load." 20 60 1 
  rm $rsynclog
  clear
  elif [ $RET -eq 1 ]; then
    return
    whiptail --fb --msgbox "Returning to Safty" 20 60 1
  else
  return
  fi
}

do_boot_option() {
   # collect list of drives 
drives= 
i=0 
for file in /dev/disk/by-id/*; do 
        # extract canonical disk name 
        disk=`readlink -f $file` 

        # extract disk id 
        id=`basename $file` 

        # filter out any partitions 
        # Logic is: remove the numeric end (if any) and check if a disk with that name exists 
        basedisk=`echo $disk | sed -e "s;[0-9]\+$;;g"` 
        if [ $disk != $basedisk ] && [ -e $basedisk ]; then 
                # so the current disk is a partition of this 
                continue 
        fi 
        # for MMC parts additional magic is required, since a p is added in between 
        basedisk=`echo $disk | sed -e "s;p[0-9]\+$;;g"` 
        if [ $disk != $basedisk ] && [ -e $basedisk ]; then 
                # so the current disk is a partition of this 
                continue 
        fi 

        # I still want to know the disk size 
        # luckily, its available under /sys/class/block/DEV/size 
        name=`basename $disk` 
        size=`cat /sys/class/block/$name/size` 
        if [ $? != 0 ]; then 
                size="??" 
        fi 
        # convert to GB 
        ((size=size/2/1024/1024)) 

        # save in array as pair 
        drives[$i]="${disk} ${id}--${size}GB(+/-5%)" 
        ((i=i+1)) 
done 
# present list to user 
selected_boot=$(whiptail --menu "Select target disk to set boot, Or Cancel to Leave" 20 80 ${#drives[@]} ${drives[@]} 3>&1 1>&2 2>&3)
 if [ $? != 0 ]; then 
        # something bad happened. The user canceled, the program crashed, I haven't got a clue. 
        return $RET
fi 

#Trap to check if your trying to boot to sdcard. 
if [ $? -eq 0 ]; then
  if [[ $selected_boot = "/dev/mmcblk0" ]]
  then
 clear
 mount /dev/mmcblk0p1 /mnt
 sed -i "s;root=/dev/[a-zA-Z0-9]*;root=/dev/mmcblk0p1;1" /mnt/boot/uEnv.txt
 umount /mnt
 whiptail --fb --msgbox "After Reboot you will be loading off the Sdcard." 20 60 1
 ASK_TO_REBOOT=1
return $RET
fi

# Anything Not mmcblk0
 clear
 mount ${selected_boot}1 /mnt
 sed -i "s;root=/dev/[a-zA-Z0-9]*;root=${selected_boot}1;1" /boot/uEnv.txt
 
 sed -i 's/Imx6 (.*)/Imx6 (NOT SD-CARD)/g' /mnt/etc/init.d/bootsplash
 sync
 umount /mnt
 whiptail --fb --msgbox "After Reboot you will be loading off the $selected_boot." 20 60 1
 ASK_TO_REBOOT=1
fi
}

do_finish() {
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --fb --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}

# $1 = filename, $2 = key name
get_json_string_val() {
  sed -n -e "s/^[[:space:]]*\"$2\"[[:space:]]*:[[:space:]]*\"\(.*\)\"[[:space:]]*,$/\1/p" $1
}

do_apply_os_config() {
  [ -e /boot/os_config.json ] || return 0
  NOOBSFLAVOUR=$(get_json_string_val /boot/os_config.json flavour)
  NOOBSLANGUAGE=$(get_json_string_val /boot/os_config.json language)
  NOOBSKEYBOARD=$(get_json_string_val /boot/os_config.json keyboard)

  if [ -n "$NOOBSFLAVOUR" ]; then
    printf "Setting flavour to %s based on os_config.json from NOOBS. May take a while\n" "$NOOBSFLAVOUR"

    if printf "%s" "$NOOBSFLAVOUR" | grep -q "Scratch"; then
      disable_raspi_config_at_booot
      enable_boot_to_scratch
    else
      printf "Unrecognised flavour. Ignoring\n"
    fi
  fi

  # TODO: currently ignores en_gb settings as we assume we are running in a 
  # first boot context, where UK English settings are default
  case "$NOOBSLANGUAGE" in
    "en")
      if [ "$NOOBSKEYBOARD" = "gb" ]; then
        DEBLANGUAGE="" # UK english is the default, so ignore
      else
        DEBLANGUAGE="en_US.UTF-8"
      fi
      ;;
    "de")
      DEBLANGUAGE="de_DE.UTF-8"
      ;;
    "fi")
      DEBLANGUAGE="fi_FI.UTF-8"
      ;;
    "fr")
      DEBLANGUAGE="fr_FR.UTF-8"
      ;;
    "hu")
      DEBLANGUAGE="hu_HU.UTF-8"
      ;;
    "ja")
      DEBLANGUAGE="ja_JP.UTF-8"
      ;;
    "nl")
      DEBLANGUAGE="nl_NL.UTF-8"
      ;;
    "pt")
      DEBLANGUAGE="pt_PT.UTF-8"
      ;;
    "ru")
      DEBLANGUAGE="ru_RU.UTF-8"
      ;;
    "zh_CN")
      DEBLANGUAGE="zh_CN.UTF-8"
      ;;
    *)
      printf "Language '%s' not handled currently. Run sudo raspi-config to set up" "$NOOBSLANGUAGE"
      ;;
  esac

  if [ -n "$DEBLANGUAGE" ]; then
    printf "Setting language to %s based on os_config.json from NOOBS. May take a while\n" "$DEBLANGUAGE"
    cat << EOF | debconf-set-selections
locales   locales/locales_to_be_generated multiselect     $DEBLANGUAGE UTF-8
EOF
    rm /etc/locale.gen
    dpkg-reconfigure -f noninteractive locales
    update-locale LANG="$DEBLANGUAGE"
    cat << EOF | debconf-set-selections
locales   locales/default_environment_locale select       $DEBLANGUAGE
EOF
  fi

  if [ -n "$NOOBSKEYBOARD" -a "$NOOBSKEYBOARD" != "gb" ]; then
    printf "Setting keyboard layout to %s based on os_config.json from NOOBS. May take a while\n" "$NOOBSKEYBOARD"
    sed -i /etc/default/keyboard -e "s/^XKBLAYOUT.*/XKBLAYOUT=\"$NOOBSKEYBOARD\"/"
    dpkg-reconfigure -f noninteractive keyboard-configuration
    invoke-rc.d keyboard-setup start
  fi
  return 0
}

#
# Command line options for non-interactive use
#
for i in $*
do
  case $i in
  --expand-rootfs)
    INTERACTIVE=False
    do_expand_rootfs
    printf "Please reboot\n"
    exit 0
    ;;
  --apply-os-config)
    INTERACTIVE=False
    do_apply_os_config
    exit $?
    ;;
  *)
    # unknown option
    ;;
  esac
done

do_upgrade() {
   whiptail --msgbox --fb "Currently not implemented" 20 60 1
}

do_internationalisation_menu() {
  FUN=$(whiptail --fb --title "IMX6 Software Configuration Tool (imx6-config)" --menu "Internationalisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "I1 Change Locale" "[Set up language and regional settings to match your location]" \
    "I2 Change Timezone" "[Set up timezone to match your location]" \
    "I3 Change Keyboard Layout" "[Set the keyboard layout to match your keyboard]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      I1\ *) do_change_locale ;;
      I2\ *) do_change_timezone ;;
      I3\ *) do_configure_keyboard ;;
      *) whiptail --fb --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --fb --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_fan_menu() {
FUN=$(whiptail --fb --title "IMX6 Software Configuration Tool (imx6-config)" --menu "Fan Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "F1 FanON" "[Test your Fan!]" \
    "F2 Max_Temp" "[Change when your fan should turn on]" \
    3>&1 1>&2 2>&3)
  RET=$?
#This needs to setup Cron to 60 second check
if [ -f $FILE ]; then
   echo "Cron Was Set" &> /dev/null
else
   echo "The File '$FILE' Does Not Exist" &> /dev/null
   touch $FILE
   echo "$CRON" >> /etc/crontab
fi
#Check for gpio settings.
if [ -d "$DIRECTORY" ]; then
  # Control will enter here if $DIRECTORY exists.
  echo "Working"
else
  echo "Not Working, Fixing.."
  echo 1 > /sys/class/gpio/export
  echo out > /sys/class/gpio/gpio1/direction
fi
#To make sure sensors is installed
if dpkg -s lm-sensors; then
   echo "sensors are installed" &> /dev/null
   clear
else
   whiptail --fb --msgbox "You don't have lm-sensors installed, please install now." 20 60 0
   apt-get install lm-sensors
   clear
fi
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      F1\ *) do_fanon ;;
      F2\ *) do_fan_options ;;
      *) whiptail --fb --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --fb --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_advanced_menu() {
  FUN=$(whiptail --fb --title "IMX6 Software Configuration Tool (imx6-config)" --menu "Advanced Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "A1 Hostname" "[Set the visible name for this Imx6 on a network]" \
    "A2 SSH" "[Enable/Disable remote command line access to your Imx6 using SSH]" \
    "A3 Uboot" "[Make uEnv.txt edits]" \
    "A4 Fan" "[For those with Fan's on their HB]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      A1\ *) do_change_hostname ;;
      A2\ *) do_ssh ;;
      A3\ *) do_uboot ;;
      A4\ *) do_fan_menu ;;
      *) whiptail --fb --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --fb --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_boot_menu() {
FUN=$(whiptail --fb --title "IMX6 Software Configuration Tool (imx6-config)" --menu "Boot Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "B1 Copy SD>X" "[This will copy the Sd-Card to External Devices]" \
    "B2 Boot Select" "[Change Your Boot On The Fly. (make sure the target has a distro!]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      B1\ *) do_SD2X ;;
      B2\ *) do_boot_option ;;
      *) whiptail --fb --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --fb --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_swap_menu() {
  FUN=$(whiptail --title "Swap Menu" --menu "Install or Swap limit?" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "O1 Install Swap" "[Start Here]" \
    "O2 Swap Presets" "[Preset Swap Limits]" \
    "O3 Swap Custom" "[Set custom swap Limits]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      O1\ *) do_swap_install ;;
      O2\ *) do_swap_limit_preset ;;
      O3\ *) do_swap_limit_custom ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

#
# Interactive use loop
#
calc_wt_size
while true; do
  FUN=$(whiptail --title "IMX6 Software Configuration Tool (imx6-config)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Change Root Password" "[Change password for the Root user (root)]" \
    "2 Change User Password" "[Change password for the default user (imx6)]" \
    "3 Internationalisation Options" "[Set up language and regional settings to match your location]" \
    "4 Swap" "[This will guide you through setting up swap.]" \
    "5 Boot Options" "[SD to External Boot]" \
    "6 Advanced Options" "[Hostname/SSH setup]" \
    "7 GUI Options" "[Setup your imx6 for a desktop or console on boot.]" \
    "8 Distribution Upgrade" "[Placeholder]" \
    "9 About imx6-config" "[Information about this configuration tool]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_change_Root ;;
      2\ *) do_change_pass ;;
      3\ *) do_internationalisation_menu ;;
      4\ *) do_swap_menu ;;
      5\ *) do_boot_menu ;;
      6\ *) do_advanced_menu ;;
      7\ *) do_desktops ;;
      8\ *) do_upgrade ;;
      9\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done


