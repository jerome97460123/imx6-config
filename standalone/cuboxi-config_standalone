#!/bin/sh
# Part of cuboi-config http://github.com/kicker22004/cuboxi-config
#
# See LICENSE file for copyright and license details

INTERACTIVE=True
ASK_TO_REBOOT=0

calc_wt_size() {
  # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
  # output from tput. However in this case, tput detects neither stdout or 
  # stderr is a tty and so only gives default 80, 24 values
  WT_HEIGHT=17
  WT_WIDTH=$(tput cols)

  if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 60 ]; then
    WT_WIDTH=80
  fi
  if [ "$WT_WIDTH" -gt 178 ]; then
    WT_WIDTH=120
  fi
  WT_MENU_HEIGHT=$(($WT_HEIGHT-8))
}

do_about() {
  whiptail --fb --msgbox "\
This tool provides a straight-forward way of doing initial
configuration of the Cubox-i (modified version of the Raspberry Pi rasp-config). Although it can be run
at any time, some of the options may have difficulties if
you have heavily customised your installation.\
" 20 70 1
}

do_expand_rootfs(){
 whiptail --fb --msgbox "Only for builds! (You used the standalone installer)" 20 60 1
}

do_change_pass() {
  whiptail --fb --msgbox "You will now be asked to enter a new password for the cubox user" 20 60 1
  passwd cubox &&
  whiptail --fb --msgbox "Password changed successfully" 20 60 1
}

do_change_Root() {
   whiptail --fb --msgbox "You will now be asked to enter a new password for the root user" 20 60 1
  passwd root &&
  whiptail --fb --msgbox "Password changed successfully" 20 60 1
}

do_configure_keyboard() {
  dpkg-reconfigure keyboard-configuration &&
  printf "Reloading keymap. This may take a short while\n" &&
  invoke-rc.d keyboard-setup start
}

do_change_locale() {
  dpkg-reconfigure locales
}

do_change_timezone() {
  dpkg-reconfigure tzdata
}

do_change_hostname() {
  whiptail --fb --msgbox "\
Please note: RFCs mandate that a hostname's labels \
may contain only the ASCII letters 'a' through 'z' (case-insensitive), 
the digits '0' through '9', and the hyphen.
Hostname labels cannot begin or end with a hyphen. 
No other symbols, punctuation characters, or blank spaces are permitted.\
" 20 70 1

  CURRENT_HOSTNAME=`cat /etc/hostname | tr -d " \t\n\r"`
  NEW_HOSTNAME=$(whiptail --inputbox "Please enter a hostname" 20 60 "$CURRENT_HOSTNAME" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    echo $NEW_HOSTNAME > /etc/hostname
    sed -i "s/127.0.1.1.*$CURRENT_HOSTNAME/127.0.1.1\t$NEW_HOSTNAME/g" /etc/hosts
    ASK_TO_REBOOT=1
  fi
}

do_ssh() {
  if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
    whiptail --fb --msgbox "Initial ssh key generation still running. Please wait and try again." 20 60 2
    return 1
  fi
  whiptail --fb --yesno "Would you like the SSH server enabled or disabled?" 20 60 2 \
    --yes-button Enable --no-button Disable
  RET=$?
  if [ $RET -eq 0 ]; then
    update-rc.d ssh enable &&
    invoke-rc.d ssh start &&
    whiptail --fb --msgbox "SSH server enabled" 20 60 1
  elif [ $RET -eq 1 ]; then
    update-rc.d ssh disable &&
    whiptail --fb --msgbox "SSH server disabled" 20 60 1
  else
    return $RET
  fi
}


do_webUi() {
  whiptail --fb --yesno "Would you like the Minecraft MineOs WebUi?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    Minecraft_UI
    whiptail --fb --msgbox "Installing Please Wait" 20 60 1
  elif [ $RET -eq 1 ]; then
    whiptail --fb --msgbox "Leaving" 20 60 1
  else
    return $RET
  fi
}

do_owncloud_install() {
whiptail --fb --yesno "Owncloud Installer?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    Owncloud-install
    whiptail --fb --msgbox "All Done Please enter https://YOURIP in your browser!" 20 60 1
  elif [ $RET -eq 1 ]; then
    whiptail --fb --msgbox "Leaving" 20 60 1
  else
    return $RET
  fi
}

do_owncloud_limit() {
  CURRENT_LIMIT=`cat /var/www/owncloud/size | tr -d " \t\n\r"`
  NEW_LIMIT=$(whiptail --inputbox "Please enter a upload limit." 20 60 "$CURRENT_LIMIT" 3>&1 1>&2 2>&3)
  if [ $? -eq 0 ]; then
    echo $NEW_LIMIT > /var/www/owncloud/size     
    sed -i "s/client_max_body_size.*$CURRENT_LIMIT/client_max_body_size\ $NEW_LIMIT/g" /etc/nginx/sites-available/default
    sed -i "s/upload_max_filesize = .*$CURRENT_LIMIT/upload_max_filesize = $NEW_LIMIT/g" /etc/php5/fpm/php.ini
    sed -i "s/post_max_size = .*$CURRENT_LIMIT/post_max_size = $NEW_LIMIT/g" /etc/php5/fpm/php.ini
  fi
    whiptail --msgbox "Upload Limit Set" 20 60 1
}

do_toggle() {
  whiptail --fb --yesno "Toggle Outputs" 20 60 2 \
    --yes-button HDMI --no-button SPDIF
  RET=$?
  if [ $RET -eq 0 ]; then
    cat <<EOF >/etc/asound.conf
pcm.!default {
  type plug
  slave {
    pcm "hw:1,0"
  }
}

ctl.!default {
  type hw
  card 1
}
EOF
    whiptail --fb --msgbox "HDMI Selected" 20 60 1
elif [ $RET -eq 1 ]; then
         cat <<EOF >/etc/asound.conf
pcm.!default {
  type plug
  slave {
    pcm "hw:0,0"
  }
}

ctl.!default {
  type hw
  card 0
}
EOF
    whiptail --fb --msgbox "SPDIF Selected" 20 60 1
  else
    return $RET
  fi
}

do_SD2USB() {
  whiptail --msgbox "\
WARNING!! THIS WILL ERASE ANYTHING THAT IS ON SDA1!
PLEASE UNPLUG ALL OTHER FLASH DRIVES LEAVING THE ONE YOU WANT.
               YOU HAVE BEEN WARNED! \
" 20 70 1
   whiptail --fb --yesno "Last Chance To Back Out!" 20 60 2 \
    --yes-button Continue --no-button BackOUT!
  RET=$?
  if [ $RET -eq 0 ]; then
    mount /dev/sda1 /mnt
cat  <<EOF >/home/cubox/exclude.list
/dev/*
/proc/*
/sys/*
/media/*
/mnt/*
/run/*
/tmp/*
/boot/*
EOF
 echo "THIS MAY TAKE A FEW MINUTES, PLEASE WAIT..."
    rsync -aH -p -P --exclude-from=/home/cubox/exclude.list  /  /mnt
cat <<EOF >/mnt/etc/init.d/bootsplash
#! /bin/sh
### BEGIN INIT INFO
# Provides:          bootsplash
# Required-Start:    
# Required-Stop:     glibc
# Default-Start:     S
# Default-Stop:
# Short-Description: Show this to console during boot
### END INIT INFO


PATH=/sbin:/usr/sbin:/bin:/usr/bin

echo "Booting Debian for Cubox (USB) ..." >> /dev/tty0
EOF
    umount /mnt
    whiptail --fb --msgbox "All Done, If you want to boot from USB select USB_Boot" 20 60 1
  elif [ $RET -eq 1 ]; then
    return
    whiptail --fb --msgbox "Returning to Safty" 20 60 1
  else
  return
  fi
  ASK_TO_REBOOT=1
}

do_SD_Boot() {
 whiptail --fb --msgbox "Setting Boot to SD-Card" 20 60 1
 mount /dev/mmcblk0p1 /mnt
 sed -i 's*/dev/sda1*/dev/mmcblk0p1*g' /mnt/etc/fstab
 sed -i 's/sda1/mmcblk0p1/g' /mnt/boot/uEnv.txt
 cat <<EOF >/etc/fstab
# UNCONFIGURED FSTAB FOR BASE SYSTEM
/dev/sda1  /           ext4    defaults,noatime,nodiratime,data=writeback,commit=600,errors=remount-ro        0       0
EOF
 umount /mnt
 whiptail --fb --msgbox "After Reboot you will be loading off the SD-CARD." 20 60 1
 ASK_TO_REBOOT=1
}	

do_USB_Boot() {
 whiptail --fb --msgbox "Setting Boot to USB" 20 60 1
  mount /dev/sda1 /mnt
 sed -i 's*/dev/mmcblk0p1*/dev/sda1*g' /mnt/etc/fstab
 sed -i 's/mmcblk0p1/sda1/g' /boot/uEnv.txt
 cat <<EOF >/mnt/etc/fstab
# UNCONFIGURED FSTAB FOR BASE SYSTEM
/dev/sda1  /           ext4    defaults,noatime        0       0
EOF
 umount /mnt
 whiptail --fb --msgbox "After Reboot you will be loading off the USB." 20 60 1
 ASK_TO_REBOOT=1
}

disable_cuboxi_config_at_boot() {
  if [ -e /etc/profile.d/cuboxi-config.sh ]; then
    rm -f /etc/profile.d/cuboxi-config.sh
    sed -i /etc/inittab \
      -e "s/^#\(.*\)#\s*CUBOXICFG_TO_ENABLE\s*/\1/" \
      -e "/#\s*CUBOXICFG_TO_DISABLE/d"
    telinit q
  fi
}

do_finish() {
  disable_cuboxi_config_at_boot
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --fb --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
      sync
      reboot
    fi
  fi
  exit 0
}

# $1 = filename, $2 = key name
get_json_string_val() {
  sed -n -e "s/^[[:space:]]*\"$2\"[[:space:]]*:[[:space:]]*\"\(.*\)\"[[:space:]]*,$/\1/p" $1
}

do_apply_os_config() {
  [ -e /boot/os_config.json ] || return 0
  NOOBSFLAVOUR=$(get_json_string_val /boot/os_config.json flavour)
  NOOBSLANGUAGE=$(get_json_string_val /boot/os_config.json language)
  NOOBSKEYBOARD=$(get_json_string_val /boot/os_config.json keyboard)

  if [ -n "$NOOBSFLAVOUR" ]; then
    printf "Setting flavour to %s based on os_config.json from NOOBS. May take a while\n" "$NOOBSFLAVOUR"

    if printf "%s" "$NOOBSFLAVOUR" | grep -q "Scratch"; then
      disable_raspi_config_at_boot
      enable_boot_to_scratch
    else
      printf "Unrecognised flavour. Ignoring\n"
    fi
  fi

  # TODO: currently ignores en_gb settings as we assume we are running in a 
  # first boot context, where UK English settings are default
  case "$NOOBSLANGUAGE" in
    "en")
      if [ "$NOOBSKEYBOARD" = "gb" ]; then
        DEBLANGUAGE="" # UK english is the default, so ignore
      else
        DEBLANGUAGE="en_US.UTF-8"
      fi
      ;;
    "de")
      DEBLANGUAGE="de_DE.UTF-8"
      ;;
    "fi")
      DEBLANGUAGE="fi_FI.UTF-8"
      ;;
    "fr")
      DEBLANGUAGE="fr_FR.UTF-8"
      ;;
    "hu")
      DEBLANGUAGE="hu_HU.UTF-8"
      ;;
    "ja")
      DEBLANGUAGE="ja_JP.UTF-8"
      ;;
    "nl")
      DEBLANGUAGE="nl_NL.UTF-8"
      ;;
    "pt")
      DEBLANGUAGE="pt_PT.UTF-8"
      ;;
    "ru")
      DEBLANGUAGE="ru_RU.UTF-8"
      ;;
    "zh_CN")
      DEBLANGUAGE="zh_CN.UTF-8"
      ;;
    *)
      printf "Language '%s' not handled currently. Run sudo raspi-config to set up" "$NOOBSLANGUAGE"
      ;;
  esac

  if [ -n "$DEBLANGUAGE" ]; then
    printf "Setting language to %s based on os_config.json from NOOBS. May take a while\n" "$DEBLANGUAGE"
    cat << EOF | debconf-set-selections
locales   locales/locales_to_be_generated multiselect     $DEBLANGUAGE UTF-8
EOF
    rm /etc/locale.gen
    dpkg-reconfigure -f noninteractive locales
    update-locale LANG="$DEBLANGUAGE"
    cat << EOF | debconf-set-selections
locales   locales/default_environment_locale select       $DEBLANGUAGE
EOF
  fi

  if [ -n "$NOOBSKEYBOARD" -a "$NOOBSKEYBOARD" != "gb" ]; then
    printf "Setting keyboard layout to %s based on os_config.json from NOOBS. May take a while\n" "$NOOBSKEYBOARD"
    sed -i /etc/default/keyboard -e "s/^XKBLAYOUT.*/XKBLAYOUT=\"$NOOBSKEYBOARD\"/"
    dpkg-reconfigure -f noninteractive keyboard-configuration
    invoke-rc.d keyboard-setup start
  fi
  return 0
}

#
# Command line options for non-interactive use
#
for i in $*
do
  case $i in
  --expand-rootfs)
    INTERACTIVE=False
    do_expand_rootfs
    printf "Please reboot\n"
    exit 0
    ;;
  --apply-os-config)
    INTERACTIVE=False
    do_apply_os_config
    exit $?
    ;;
  *)
    # unknown option
    ;;
  esac
done

do_internationalisation_menu() {
  FUN=$(whiptail --fb --title "Cubox-i Software Configuration Tool (cuboxi-config)" --menu "Internationalisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "I1 Change Locale" "Set up language and regional settings to match your location" \
    "I2 Change Timezone" "Set up timezone to match your location" \
    "I3 Change Keyboard Layout" "Set the keyboard layout to match your keyboard" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      I1\ *) do_change_locale ;;
      I2\ *) do_change_timezone ;;
      I3\ *) do_configure_keyboard ;;
      *) whiptail --fb --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --fb --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_advanced_menu() {
  FUN=$(whiptail --fb --title "Cubox-i Software Configuration Tool (cuboxi-config)" --menu "Advanced Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "A1 Hostname" "Set the visible name for this Cubox-i on a network" \
    "A2 SSH" "Enable/Disable remote command line access to your Cubox-i using SSH" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      A1\ *) do_change_hostname ;;
      A2\ *) do_ssh ;;
      *) whiptail --fb --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --fb --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_boot_menu() {
FUN=$(whiptail --fb --title "Cubox-i Software Configuration Tool (cuboxi-config)" --menu "Boot Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "B1 Copy SD2USB" "This will copy the Sd-Card to the USB for USB loading.(Must have empty USB with ext4)" \
    "B2 SD-Card" "This will set the SD-Card as boot device." \
    "B3 USB" "This will set the USB as boot device.(Can only work after Copy SD2USB)" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      B1\ *) do_SD2USB ;;
      B2\ *) do_SD_Boot ;;
      B3\ *) do_USB_Boot ;;
      *) whiptail --fb --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --fb --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_owncloud_menu() {
  FUN=$(whiptail --title "Owncloud Menu" --menu "Install or Upload limit?" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "O1 Install Owncloud" "" \
    "O2 Upload Limit" "Changes Upload Limit" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      O1\ *) do_owncloud_install ;;
      O2\ *) do_owncloud_limit ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

do_one_click_menu() {
FUN=$(whiptail --fb --title "Cubox-i Software Configuration Tool (cuboxi-config)" --menu "One Click Installer Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "C1 Minecraft WebUi" "This will install the great MineOs WebUi for Minecraft!" \
    "C2 Owncloud" "This will Setup Owncloud fast and simple." \
    "C3 LXDE" "Sometimes we all need a GUI, Make it LXDE?" \
    "C4 Gnome 3" "Gnome your thing? Click here!" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    return 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      C1\ *) do_webui ;;
      C2\ *) do_owncloud_menu ;;
      C3\ *) do_LXDE ;;
      C4\ *) do_Gnome_3 ;;
      *) whiptail --fb --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --fb --msgbox "There was an error running option $FUN" 20 60 1
  fi
}

#
# Interactive use loop
#
calc_wt_size
while true; do
  FUN=$(whiptail --title "Cubox-i Software Configuration Tool (cuboxi-config)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Expand Filesystem" "Ensures that all of the SD card storage is available to the OS" \
    "2 Change Root Password" "Change password for the Root user (root)" \
    "3 Change User Password" "Change password for the default user (cubox)" \
    "4 Toggle Volume" "Pick Your Output" \
    "5 Internationalisation Options" "Set up language and regional settings to match your location" \
    "6 Boot Options" "SD/USB Boot" \
    "7 Advanced Options" "Configure advanced settings" \
    "8 One Click Installers" "WIP" \
    "9 About Cuboxi-config" "Information about this configuration tool" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_expand_rootfs ;;
      2\ *) do_change_Root ;;
      3\ *) do_change_pass ;;
      4\ *) do_toggle ;;
      5\ *) do_internationalisation_menu ;;
      6\ *) do_boot_menu ;;
      7\ *) do_advanced_menu ;;
      8\ *) do_one_click_menu ;;
      9\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
